Terminals unused in grammar

   WHILE
   RETURN
   TYPECASE
   ATLEAST
   ATMOST
   EQUALS
   OR
   NOT
   '>'
   '<'
   '/'


Grammar

    0 $accept: pgm $end

    1 pgm: classes statements

    2 classes: %empty
    3        | classes class

    4 class: CLASS ident '(' formals ')' opt_extends '{' statements methods '}'

    5 opt_extends: EXTENDS ident
    6            | %empty

    7 formals: %empty
    8        | formals formal

    9 formal: ident ':' ident
   10       | ',' ident ':' ident

   11 methods: %empty
   12        | methods method

   13 method: DEF ident '(' formals ')' returns '{' statements '}'

   14 returns: ':' ident

   15 statements: statements statement
   16           | %empty

   17 statement_block: '{' statements '}'

   18 statement: IF expr statement_block opt_elif_parts

   19 opt_elif_parts: ELIF expr statement_block opt_elif_parts
   20               | ELSE statement_block
   21               | %empty

   22 statement: l_expr '=' expr ';'
   23          | l_expr ':' ident '=' expr ';'

   24 l_expr: IDENT

   25 expr: l_expr
   26     | STRING_LIT
   27     | INT_LIT
   28     | expr '*' expr
   29     | expr '+' expr
   30     | expr '-' expr
   31     | '-' expr
   32     | expr AND expr
   33     | expr '.' ident '(' actual_args ')'

   34 actual_args: %empty
   35            | actual_args_nonempty

   36 actual_args_nonempty: actual_args_nonempty ',' expr
   37                     | expr

   38 expr: ident '(' actual_args ')'

   39 ident: IDENT


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 13 33 38
')' (41) 4 13 33 38
'*' (42) 28
'+' (43) 29
',' (44) 10 36
'-' (45) 30 31
'.' (46) 33
'/' (47)
':' (58) 9 10 14 23
';' (59) 22 23
'<' (60)
'=' (61) 22 23
'>' (62)
'{' (123) 4 13 17
'}' (125) 4 13 17
error (256)
CLASS (258) 4
DEF (259) 13
EXTENDS (260) 5
IF (261) 18
ELIF (262) 19
ELSE (263) 20
WHILE (264)
RETURN (265)
TYPECASE (266)
ATLEAST (267)
ATMOST (268)
EQUALS (269)
AND (270) 32
OR (271)
NOT (272)
IDENT <str> (273) 24 39
INT_LIT <num> (274) 27
STRING_LIT <str> (275) 26
NEG (276)


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
pgm <node> (38)
    on left: 1, on right: 0
classes <classes> (39)
    on left: 2 3, on right: 1 3
class <klass> (40)
    on left: 4, on right: 3
opt_extends <ident> (41)
    on left: 5 6, on right: 4
formals <formals> (42)
    on left: 7 8, on right: 4 8 13
formal <formal> (43)
    on left: 9 10, on right: 8
methods <methods> (44)
    on left: 11 12, on right: 4 12
method <method> (45)
    on left: 13, on right: 12
returns <returns> (46)
    on left: 14, on right: 13
statements <block> (47)
    on left: 15 16, on right: 1 4 13 15 17
statement_block <block> (48)
    on left: 17, on right: 18 19 20
statement <statement> (49)
    on left: 18 22 23, on right: 15
opt_elif_parts <block> (50)
    on left: 19 20 21, on right: 18 19
l_expr <l_expr> (51)
    on left: 24, on right: 22 23 25
expr <expr> (52)
    on left: 25 26 27 28 29 30 31 32 33 38, on right: 18 19 22 23 28
    29 30 31 32 33 36 37
actual_args <actuals> (53)
    on left: 34 35, on right: 33 38
actual_args_nonempty <actuals> (54)
    on left: 36 37, on right: 35 36
ident <ident> (55)
    on left: 39, on right: 4 5 9 10 13 14 23 33 38


State 0

    0 $accept: . pgm $end
    1 pgm: . classes statements
    2 classes: . %empty
    3        | . classes class

    $default  reduce using rule 2 (classes)

    pgm      go to state 1
    classes  go to state 2


State 1

    0 $accept: pgm . $end

    $end  shift, and go to state 3


State 2

    1 pgm: classes . statements
    3 classes: classes . class
    4 class: . CLASS ident '(' formals ')' opt_extends '{' statements methods '}'
   15 statements: . statements statement
   16           | . %empty  [$end, IF, IDENT]

    CLASS  shift, and go to state 4

    $default  reduce using rule 16 (statements)

    class       go to state 5
    statements  go to state 6


State 3

    0 $accept: pgm $end .

    $default  accept


State 4

    4 class: CLASS . ident '(' formals ')' opt_extends '{' statements methods '}'
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 8


State 5

    3 classes: classes class .

    $default  reduce using rule 3 (classes)


State 6

    1 pgm: classes statements .  [$end]
   15 statements: statements . statement
   18 statement: . IF expr statement_block opt_elif_parts
   22          | . l_expr '=' expr ';'
   23          | . l_expr ':' ident '=' expr ';'
   24 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10

    $default  reduce using rule 1 (pgm)

    statement  go to state 11
    l_expr     go to state 12


State 7

   39 ident: IDENT .

    $default  reduce using rule 39 (ident)


State 8

    4 class: CLASS ident . '(' formals ')' opt_extends '{' statements methods '}'

    '('  shift, and go to state 13


State 9

   18 statement: IF . expr statement_block opt_elif_parts
   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 19
    ident   go to state 20


State 10

   24 l_expr: IDENT .

    $default  reduce using rule 24 (l_expr)


State 11

   15 statements: statements statement .

    $default  reduce using rule 15 (statements)


State 12

   22 statement: l_expr . '=' expr ';'
   23          | l_expr . ':' ident '=' expr ';'

    ':'  shift, and go to state 21
    '='  shift, and go to state 22


State 13

    4 class: CLASS ident '(' . formals ')' opt_extends '{' statements methods '}'
    7 formals: . %empty
    8        | . formals formal

    $default  reduce using rule 7 (formals)

    formals  go to state 23


State 14

   24 l_expr: IDENT .  [AND, '+', '-', '*', '.', ')', '{', ',', ';']
   39 ident: IDENT .  ['(']

    '('       reduce using rule 39 (ident)
    $default  reduce using rule 24 (l_expr)


State 15

   27 expr: INT_LIT .

    $default  reduce using rule 27 (expr)


State 16

   26 expr: STRING_LIT .

    $default  reduce using rule 26 (expr)


State 17

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   31     | '-' . expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 24
    ident   go to state 20


State 18

   25 expr: l_expr .

    $default  reduce using rule 25 (expr)


State 19

   17 statement_block: . '{' statements '}'
   18 statement: IF expr . statement_block opt_elif_parts
   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    '{'  shift, and go to state 30

    statement_block  go to state 31


State 20

   38 expr: ident . '(' actual_args ')'

    '('  shift, and go to state 32


State 21

   23 statement: l_expr ':' . ident '=' expr ';'
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 33


State 22

   22 statement: l_expr '=' . expr ';'
   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 34
    ident   go to state 20


State 23

    4 class: CLASS ident '(' formals . ')' opt_extends '{' statements methods '}'
    8 formals: formals . formal
    9 formal: . ident ':' ident
   10       | . ',' ident ':' ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7
    ')'    shift, and go to state 35
    ','    shift, and go to state 36

    formal  go to state 37
    ident   go to state 38


State 24

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   31     | '-' expr .  [AND, '+', '-', '*', ')', '{', ',', ';']
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    '.'  shift, and go to state 29

    $default  reduce using rule 31 (expr)

    Conflict between rule 31 and token AND resolved as reduce (AND < NEG).
    Conflict between rule 31 and token '+' resolved as reduce ('+' < NEG).
    Conflict between rule 31 and token '-' resolved as reduce ('-' < NEG).
    Conflict between rule 31 and token '*' resolved as reduce ('*' < NEG).
    Conflict between rule 31 and token '.' resolved as shift (NEG < '.').


State 25

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   32     | expr AND . expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 39
    ident   go to state 20


State 26

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   29     | expr '+' . expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 40
    ident   go to state 20


State 27

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   30     | expr '-' . expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 41
    ident   go to state 20


State 28

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   28     | expr '*' . expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 42
    ident   go to state 20


State 29

   33 expr: expr '.' . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 43


State 30

   15 statements: . statements statement
   16           | . %empty
   17 statement_block: '{' . statements '}'

    $default  reduce using rule 16 (statements)

    statements  go to state 44


State 31

   18 statement: IF expr statement_block . opt_elif_parts
   19 opt_elif_parts: . ELIF expr statement_block opt_elif_parts
   20               | . ELSE statement_block
   21               | . %empty  [$end, DEF, IF, IDENT, '}']

    ELIF  shift, and go to state 45
    ELSE  shift, and go to state 46

    $default  reduce using rule 21 (opt_elif_parts)

    opt_elif_parts  go to state 47


State 32

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   34 actual_args: . %empty  [')']
   35            | . actual_args_nonempty
   36 actual_args_nonempty: . actual_args_nonempty ',' expr
   37                     | . expr
   38 expr: . ident '(' actual_args ')'
   38     | ident '(' . actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    $default  reduce using rule 34 (actual_args)

    l_expr                go to state 18
    expr                  go to state 48
    actual_args           go to state 49
    actual_args_nonempty  go to state 50
    ident                 go to state 20


State 33

   23 statement: l_expr ':' ident . '=' expr ';'

    '='  shift, and go to state 51


State 34

   22 statement: l_expr '=' expr . ';'
   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    ';'  shift, and go to state 52


State 35

    4 class: CLASS ident '(' formals ')' . opt_extends '{' statements methods '}'
    5 opt_extends: . EXTENDS ident
    6            | . %empty  ['{']

    EXTENDS  shift, and go to state 53

    $default  reduce using rule 6 (opt_extends)

    opt_extends  go to state 54


State 36

   10 formal: ',' . ident ':' ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 55


State 37

    8 formals: formals formal .

    $default  reduce using rule 8 (formals)


State 38

    9 formal: ident . ':' ident

    ':'  shift, and go to state 56


State 39

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   32     | expr AND expr .  [AND, ')', '{', ',', ';']
   33     | expr . '.' ident '(' actual_args ')'

    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 32 (expr)

    Conflict between rule 32 and token AND resolved as reduce (%left AND).
    Conflict between rule 32 and token '+' resolved as shift (AND < '+').
    Conflict between rule 32 and token '-' resolved as shift (AND < '-').
    Conflict between rule 32 and token '*' resolved as shift (AND < '*').
    Conflict between rule 32 and token '.' resolved as shift (AND < '.').


State 40

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   29     | expr '+' expr .  [AND, '+', '-', ')', '{', ',', ';']
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 29 (expr)

    Conflict between rule 29 and token AND resolved as reduce (AND < '+').
    Conflict between rule 29 and token '+' resolved as reduce (%left '+').
    Conflict between rule 29 and token '-' resolved as reduce (%left '-').
    Conflict between rule 29 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 29 and token '.' resolved as shift ('+' < '.').


State 41

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   30     | expr '-' expr .  [AND, '+', '-', ')', '{', ',', ';']
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 30 (expr)

    Conflict between rule 30 and token AND resolved as reduce (AND < '-').
    Conflict between rule 30 and token '+' resolved as reduce (%left '+').
    Conflict between rule 30 and token '-' resolved as reduce (%left '-').
    Conflict between rule 30 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 30 and token '.' resolved as shift ('-' < '.').


State 42

   28 expr: expr . '*' expr
   28     | expr '*' expr .  [AND, '+', '-', '*', ')', '{', ',', ';']
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    '.'  shift, and go to state 29

    $default  reduce using rule 28 (expr)

    Conflict between rule 28 and token AND resolved as reduce (AND < '*').
    Conflict between rule 28 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 28 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 28 and token '*' resolved as reduce (%left '*').
    Conflict between rule 28 and token '.' resolved as shift ('*' < '.').


State 43

   33 expr: expr '.' ident . '(' actual_args ')'

    '('  shift, and go to state 57


State 44

   15 statements: statements . statement
   17 statement_block: '{' statements . '}'
   18 statement: . IF expr statement_block opt_elif_parts
   22          | . l_expr '=' expr ';'
   23          | . l_expr ':' ident '=' expr ';'
   24 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10
    '}'    shift, and go to state 58

    statement  go to state 11
    l_expr     go to state 12


State 45

   19 opt_elif_parts: ELIF . expr statement_block opt_elif_parts
   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 59
    ident   go to state 20


State 46

   17 statement_block: . '{' statements '}'
   20 opt_elif_parts: ELSE . statement_block

    '{'  shift, and go to state 30

    statement_block  go to state 60


State 47

   18 statement: IF expr statement_block opt_elif_parts .

    $default  reduce using rule 18 (statement)


State 48

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'
   37 actual_args_nonempty: expr .  [')', ',']

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 37 (actual_args_nonempty)


State 49

   38 expr: ident '(' actual_args . ')'

    ')'  shift, and go to state 61


State 50

   35 actual_args: actual_args_nonempty .  [')']
   36 actual_args_nonempty: actual_args_nonempty . ',' expr

    ','  shift, and go to state 62

    $default  reduce using rule 35 (actual_args)


State 51

   23 statement: l_expr ':' ident '=' . expr ';'
   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   38     | . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 63
    ident   go to state 20


State 52

   22 statement: l_expr '=' expr ';' .

    $default  reduce using rule 22 (statement)


State 53

    5 opt_extends: EXTENDS . ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 64


State 54

    4 class: CLASS ident '(' formals ')' opt_extends . '{' statements methods '}'

    '{'  shift, and go to state 65


State 55

   10 formal: ',' ident . ':' ident

    ':'  shift, and go to state 66


State 56

    9 formal: ident ':' . ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 67


State 57

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   33     | expr '.' ident '(' . actual_args ')'
   34 actual_args: . %empty  [')']
   35            | . actual_args_nonempty
   36 actual_args_nonempty: . actual_args_nonempty ',' expr
   37                     | . expr
   38 expr: . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    $default  reduce using rule 34 (actual_args)

    l_expr                go to state 18
    expr                  go to state 48
    actual_args           go to state 68
    actual_args_nonempty  go to state 50
    ident                 go to state 20


State 58

   17 statement_block: '{' statements '}' .

    $default  reduce using rule 17 (statement_block)


State 59

   17 statement_block: . '{' statements '}'
   19 opt_elif_parts: ELIF expr . statement_block opt_elif_parts
   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    '{'  shift, and go to state 30

    statement_block  go to state 69


State 60

   20 opt_elif_parts: ELSE statement_block .

    $default  reduce using rule 20 (opt_elif_parts)


State 61

   38 expr: ident '(' actual_args ')' .

    $default  reduce using rule 38 (expr)


State 62

   24 l_expr: . IDENT
   25 expr: . l_expr
   26     | . STRING_LIT
   27     | . INT_LIT
   28     | . expr '*' expr
   29     | . expr '+' expr
   30     | . expr '-' expr
   31     | . '-' expr
   32     | . expr AND expr
   33     | . expr '.' ident '(' actual_args ')'
   36 actual_args_nonempty: actual_args_nonempty ',' . expr
   38 expr: . ident '(' actual_args ')'
   39 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 70
    ident   go to state 20


State 63

   23 statement: l_expr ':' ident '=' expr . ';'
   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    ';'  shift, and go to state 71


State 64

    5 opt_extends: EXTENDS ident .

    $default  reduce using rule 5 (opt_extends)


State 65

    4 class: CLASS ident '(' formals ')' opt_extends '{' . statements methods '}'
   15 statements: . statements statement
   16           | . %empty

    $default  reduce using rule 16 (statements)

    statements  go to state 72


State 66

   10 formal: ',' ident ':' . ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 73


State 67

    9 formal: ident ':' ident .

    $default  reduce using rule 9 (formal)


State 68

   33 expr: expr '.' ident '(' actual_args . ')'

    ')'  shift, and go to state 74


State 69

   19 opt_elif_parts: . ELIF expr statement_block opt_elif_parts
   19               | ELIF expr statement_block . opt_elif_parts
   20               | . ELSE statement_block
   21               | . %empty  [$end, DEF, IF, IDENT, '}']

    ELIF  shift, and go to state 45
    ELSE  shift, and go to state 46

    $default  reduce using rule 21 (opt_elif_parts)

    opt_elif_parts  go to state 75


State 70

   28 expr: expr . '*' expr
   29     | expr . '+' expr
   30     | expr . '-' expr
   32     | expr . AND expr
   33     | expr . '.' ident '(' actual_args ')'
   36 actual_args_nonempty: actual_args_nonempty ',' expr .  [')', ',']

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 36 (actual_args_nonempty)


State 71

   23 statement: l_expr ':' ident '=' expr ';' .

    $default  reduce using rule 23 (statement)


State 72

    4 class: CLASS ident '(' formals ')' opt_extends '{' statements . methods '}'
   11 methods: . %empty  [DEF, '}']
   12        | . methods method
   15 statements: statements . statement
   18 statement: . IF expr statement_block opt_elif_parts
   22          | . l_expr '=' expr ';'
   23          | . l_expr ':' ident '=' expr ';'
   24 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10

    $default  reduce using rule 11 (methods)

    methods    go to state 76
    statement  go to state 11
    l_expr     go to state 12


State 73

   10 formal: ',' ident ':' ident .

    $default  reduce using rule 10 (formal)


State 74

   33 expr: expr '.' ident '(' actual_args ')' .

    $default  reduce using rule 33 (expr)


State 75

   19 opt_elif_parts: ELIF expr statement_block opt_elif_parts .

    $default  reduce using rule 19 (opt_elif_parts)


State 76

    4 class: CLASS ident '(' formals ')' opt_extends '{' statements methods . '}'
   12 methods: methods . method
   13 method: . DEF ident '(' formals ')' returns '{' statements '}'

    DEF  shift, and go to state 77
    '}'  shift, and go to state 78

    method  go to state 79


State 77

   13 method: DEF . ident '(' formals ')' returns '{' statements '}'
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 80


State 78

    4 class: CLASS ident '(' formals ')' opt_extends '{' statements methods '}' .

    $default  reduce using rule 4 (class)


State 79

   12 methods: methods method .

    $default  reduce using rule 12 (methods)


State 80

   13 method: DEF ident . '(' formals ')' returns '{' statements '}'

    '('  shift, and go to state 81


State 81

    7 formals: . %empty
    8        | . formals formal
   13 method: DEF ident '(' . formals ')' returns '{' statements '}'

    $default  reduce using rule 7 (formals)

    formals  go to state 82


State 82

    8 formals: formals . formal
    9 formal: . ident ':' ident
   10       | . ',' ident ':' ident
   13 method: DEF ident '(' formals . ')' returns '{' statements '}'
   39 ident: . IDENT

    IDENT  shift, and go to state 7
    ')'    shift, and go to state 83
    ','    shift, and go to state 36

    formal  go to state 37
    ident   go to state 38


State 83

   13 method: DEF ident '(' formals ')' . returns '{' statements '}'
   14 returns: . ':' ident

    ':'  shift, and go to state 84

    returns  go to state 85


State 84

   14 returns: ':' . ident
   39 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 86


State 85

   13 method: DEF ident '(' formals ')' returns . '{' statements '}'

    '{'  shift, and go to state 87


State 86

   14 returns: ':' ident .

    $default  reduce using rule 14 (returns)


State 87

   13 method: DEF ident '(' formals ')' returns '{' . statements '}'
   15 statements: . statements statement
   16           | . %empty

    $default  reduce using rule 16 (statements)

    statements  go to state 88


State 88

   13 method: DEF ident '(' formals ')' returns '{' statements . '}'
   15 statements: statements . statement
   18 statement: . IF expr statement_block opt_elif_parts
   22          | . l_expr '=' expr ';'
   23          | . l_expr ':' ident '=' expr ';'
   24 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10
    '}'    shift, and go to state 89

    statement  go to state 11
    l_expr     go to state 12


State 89

   13 method: DEF ident '(' formals ')' returns '{' statements '}' .

    $default  reduce using rule 13 (method)
